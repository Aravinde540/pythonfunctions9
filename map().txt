		====================================
				2) map()
		====================================
=>map() is used for obtaining new Iterable object from existing iterable object by applying old iterable elements to the function.
=>In otherwords, map() is used for obtaining new list of elements  from  existing list of elements by applying old list  elements to the function.

=>Syntax:-      varname=map(FunctionName,Iterable_object)
				
=>here 'varname' is an object of type <class,map'> and we can convert into any iteratable object by using type casting functions.
=>"FunctionName" represents either Normal function or anonymous functions.
=>"Iterable_object" represents Sequence, List, set and dict types.
=>The execution process of map() is that " map() sends every element of iterable object to the specified function, process it and returns the modified value (result) and new list of elements will be obtained". This process will be continued until all elements of Iterable_object completed.
-----------------------------------------------------------------------------------------------------------------------------------------------------

===============================================================================================================================================
#Program accepting List of Salaries and Give 50% Hike to Every Emp Sal
#MapEx1.py
def hike(sal):
    return (sal+sal*50/100)

#Main Program
print("Enter List of Values Separated by Space:")
oldsal=list(map(float,input().split()))
#Give 50% Hike all Employees
newsal=list(map(hike,oldsal))
print("-"*50)
print("\tOld Salary\t\tNew Salary")
print("-"*50)
for osl,nsl in zip(oldsal,newsal):
    print("\t{}\t\t\t{}".format(osl,nsl))
print("-"*50)

===============================================================================================================================================
#Program for Reading the Values from Key Board by using Map without using List comprehension
#MapEx2.py
print("Enter List of Elements separated by space")
lst=list(map(float,input().split()))
print("Content of list=",lst)



===============================================================================================================================================

#Program accepting List of Salaries and Give 50% Hike to Every Emp Sal
#MapEx3.py
print("Enter List of Values Separated by Space:")
oldsal=list(map(float,input().split()))
#Give 50% Hike all Employees
newsal=list(map(lambda sal:sal+sal*50/100,oldsal))
print("-"*50)
print("\tOld Salary\t\tNew Salary")
print("-"*50)
for osl,nsl in zip(oldsal,newsal):
    print("\t{}\t\t\t{}".format(osl,nsl))
print("-"*50)


===============================================================================================================================================


#Program accepting List of Numerical values and find their Squares and Square Root
#MapEx4.py
print("Enter List of Values Specrated Space:")
tpl=tuple(map(float, input().split()))
print(tpl,type(tpl))
#Find Squares by using map with Anonymous Functions
sqrvals=list(map(lambda n:n**2,tpl))
#Find Square roots by using map with Anonymous Functions
sqrtvals=tuple(map(lambda n: n**0.5,tpl))
print("*"*50)
print("GivenValues\t\tSquare Values\t\tSquare Roots")
print("*"*50)
for gv,srv,srtv in zip(tpl,sqrvals,sqrtvals):
    print("\t{}\t\t\t{}\t\t\t{}".format(gv,srv,round(srtv,2)))
print("*"*50)




===============================================================================================================================================

#Program for adding Two  Equal List Elements
#MapEx5.py
def sumop(x,y):
    return x+y
print("Enter First List Elements:")
lst1=list(map(float,input().split()))
print("Enter Second List Elements:")
lst2=list(map(float,input().split()))
#add Two List Objects by using map()
lst3=list(map(sumop, lst1,lst2))
print("-"*50)
print("\tList1\t\tList2\t\tSumList")
print("-"*50)
for val1,val2,val3 in zip(lst1,lst2,lst3):
    print("\t{}\t\t{}\t\t{}".format(val1,val2,val3))
print("-"*50)




===============================================================================================================================================

#Program for adding Two  Equal List Elements
#MapEx6.py
print("Enter First List Elements:")
lst1=list(map(float,input().split()))
print("Enter Second List Elements:")
lst2=list(map(float,input().split()))
#add Two List Objects by using map()
lst3=list(map(lambda a,b: a+b, lst1,lst2))
print("-"*50)
print("\tList1\t\tList2\t\tSumList")
print("-"*50)
for val1,val2,val3 in zip(lst1,lst2,lst3):
    print("\t{}\t\t{}\t\t{}".format(val1,val2,round(val3,2)))
print("-"*50)







===============================================================================================================================================


#Program for adding Two  Un-Equal List Elements
#MapEx7.py
lst1=list(map(float,input("Enter First List Elements:").split()))
lst2=list(map(float,input("Enter Second List Elements:").split()))
#in the case Lst1 contains More Elements than lst2
if(len(lst1)>len(lst2)):
    for i in range(len(lst1)-len(lst2)):
        lst2.append(0)
elif(len(lst2)>len(lst1)):
    for i in range(len(lst2)-len(lst1)):
        lst1.append(0)
#add Two List Objects Data
sumlist=list(map(lambda a,b: a+b, lst1,lst2))
print("-"*50)
print("\tList1\t\tList2\t\tSumList")
print("-"*50)
for val1,val2,val3 in zip(lst1,lst2,sumlist):
    print("\t{}\t\t{}\t\t{}".format(val1,val2,round(val3,2)))
print("-"*50)





===============================================================================================================================================









===============================================================================================================================================