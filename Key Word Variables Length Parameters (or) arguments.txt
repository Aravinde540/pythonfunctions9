		================================================
			5) Key Word Variables Length Parameters (or) arguments
		================================================
=>When we have family of multiple function calls with Key Word Variable number of values / arguments then with normal python programming, we must define mutiple function defintions. This process leads to more development time. 
=>To overcome this process, we must use the concept of Keyword Variable length Parameters .
=>To Implement, Keyword Variable length Parameters concept, we must define single Function Definition and takes a formal Parameter preceded with a symbol called double astrisk  ( ** param) and the formal parameter with double astrisk symbol is called Keyword Variable length Parameters  and whose purpose is to hold / store any number of (Key,Value)  coming from similar function calls and whose type is <class, 'dict'>.
---------------------------------------------------------------------------------------------------
Syntax for function definition with Keyword Variables Length Parameters:
---------------------------------------------------------------------------------------------------
	def   functionname(list of formal params,  **param) :
	        --------------------------------------------------
		--------------------------------------------------

=>Here **param is called Keyword Variable Length parameter and it can hold any number of Key word argument values (or) Keyword variable number of argument values and **param type is <class,'dict'>

=>Rule:- The **param must always written at last part of Function Heading and it must be only one (but not multiple)
---------------------------------------------------------------
Final Syntax for defining a Function
---------------------------------------------------------------
def  funcname(PosFormal parms, *Varlenparam, default params, **kwdvarlenparam):
			-------------------------------------------------
			---------------------------------------------------
==============================X============================================================

NOTE:
----------
>>> sno,*sdet=100,"RS",50,60,55
>>> print(sno)----------100
>>> print(sdet,type(sdet))--------['RS', 50, 60, 55] <class 'list'>
========================================x=====================================

#Program for Demonstrating the Need of  Keyword Variable Length Arguments
#KeyWordVarLenArgsEx1.py
def  dispvalues1(eno,ename,sal,compname): # Function Def-1
	print(eno,ename,sal,compname)

def  dispvalues2(sno,sname,cm,cppm,pm):  # Function Def-2
	print(sno,sname,cm,cppm,pm)


#Main Program
dispvalues1(eno=10,ename="RS",sal=45.67,compname="PSF") # Function call-1 with 4  Keyword args
dispvalues2(sno=20,sname="Travis",cm=30,cppm=56,pm=58)# Function call-2 with 5 Keyword args


#Program for Demonstrating the Need of  Keyword Variable Length Arguments
#This Program Program will not execute as it is bcoz Python Compiler and PVM can performs Interpretation Process and  It can remember only Latest Function Function.
#KeyWordVarLenArgsEx2.py
def  dispvalues(eno,ename,sal,compname): # Function Def-1
	print(eno,ename,sal,compname)

def  dispvalues(sno,sname,cm,cppm,pm):  # Function Def-2
	print(sno,sname,cm,cppm,pm)

def dispvalues(tno,tname,subject1,subject2,Subject3,colname): #  Function Def-3
	print(tno,tname,subject1,subject2,Subject3,colname)

def dispvalues(cid,cname,job): #  Function Def-4
	print(cid,cname,job)

#Main Program
dispvalues(eno=10,ename="RS",sal=45.67,compname="PSF") # Function call-1 with 4  Keyword Variable length args
dispvalues(sno=20,sname="Travis",cm=30,cppm=56,pm=58)# Function call-2 with 5 Keyword Variable length  args
dispvalues(tno=30,tname="Ritche",subject1="PYTHON",subject2="Java",Subject3="C",colname="JNTU") # Function call-3 with 6  Keyword Variable length  args
dispvalues(cid=40,cname="Hunter",job="Student")  # Function call-4 with 3  Keyword Variable length  args




#Program for Demonstrating the Need of  Keyword Variable Length Arguments
#This Program Program will not execute as it is bcoz Python Compiler and PVM can performs Interpretation Process and  It can remember only Latest Function Function.
#KeyWordVarLenArgsEx3.py
def  dispvalues(eno,ename,sal,compname): # Function Def-1
	print(eno,ename,sal,compname)

dispvalues(eno=10,ename="RS",sal=45.67,compname="PSF") # Function call-1 with 4  Keyword Variable length args
#------------------------------------------------------------------------------------------------------------------
def  dispvalues(sno,sname,cm,cppm,pm):  # Function Def-2
	print(sno,sname,cm,cppm,pm)

dispvalues(sno=20,sname="Travis",cm=30,cppm=56,pm=58)# Function call-2 with 5 Keyword Variable length  args
#------------------------------------------------------------------------------------------------------------------
def dispvalues(tno,tname,subject1,subject2,Subject3,colname): #  Function Def-3
	print(tno,tname,subject1,subject2,Subject3,colname)

dispvalues(tno=30,tname="Ritche",subject1="PYTHON",subject2="Java",Subject3="C",colname="JNTU") # Function call-3 with 6  Keyword Variable length  args
#------------------------------------------------------------------------------------------------------------------
def dispvalues(cid,cname,job): #  Function Def-4
	print(cid,cname,job)

dispvalues(cid=40,cname="Hunter",job="Student")  # Function call-4 with 3  Keyword Variable length  args
#------------------------------------------------------------------------------------------------------------------

#NOTE
#If we observe the above For Every Function Def, we are Immediately writing Function call
# In otherwords for n-Function Calls we are defining n-Function Definitions. This Process leads to Waste of time





#Program for Demonstrating the Need of  Keyword Variable Length Arguments
#This Program Program will  execute as it is
#PureKeyWordVarLenArgsEx1.py

def  dispvalues(**kvr): # here **kvr is called Key-word variable length argument and whose type <class,dict>
	print(kvr,type(kvr))


#Main Program
dispvalues(eno=10,ename="RS",sal=45.67,compname="PSF") # Function call-1 with 4  Keyword Variable length args
dispvalues(sno=20,sname="Travis",cm=30,cppm=56,pm=58)# Function call-2 with 5 Keyword Variable length  args
dispvalues(tno=30,tname="Ritche",subject1="PYTHON",subject2="Java",Subject3="C",colname="JNTU") # Function call-3 with 6  Keyword Variable length  args
dispvalues(cid=40,cname="Hunter",job="Student")  # Function call-4 with 3  Keyword Variable length  args


#Program for Demonstrating the Need of  Keyword Variable Length Arguments
#This Program Program will  execute as it is
#PureKeyWordVarLenArgsEx2.py

def  dispvalues(**kvr): # here **kvr is called Key-word variable length argument and whose type <class,dict>
	print("----------------------------------------------------")
	for k,v in kvr.items():
		print("\t{}--->{}".format(k,v))
	print("----------------------------------------------------")

#Main Program
dispvalues(eno=10,ename="RS",sal=45.67,compname="PSF") # Function call-1 with 4  Keyword Variable length args
dispvalues(sno=20,sname="Travis",cm=30,cppm=56,pm=58)# Function call-2 with 5 Keyword Variable length  args
dispvalues(tno=30,tname="Ritche",subject1="PYTHON",subject2="Java",Subject3="C",colname="JNTU") # Function call-3 with 6  Keyword Variable length  args
dispvalues(cid=40,cname="Hunter",job="Student")  # Function call-4 with 3  Keyword Variable length  args




#PureKeyWordVarLenArgsEx3.py
def findtotalmarks(ID,sname,cls,**submarks):
	print("-"*50)
	print("\tStudent Number:{}".format(ID))
	print("\tStudent Name:{}".format(sname))
	print("\tStudent Class:{}".format(cls))
	print("-"*50)
	if(len(submarks)!=0):
		tot=0
		print("\tSubject Name\tMarks")
		print("-"*50)
		for subject,marks in submarks.items():
			print("\t{}\t\t{}".format(subject,marks))
			tot=tot+marks
		print("-"*50)
		print("\tTOTAL MARKS={}".format(tot))
		print("-"*50)

#Main Program
findtotalmarks(100,"Praveen","X",telugu=70,hindi=80,english=85,maths=90,science=89,social=80)
findtotalmarks(200,"Sandeep","XI",Sanskrit=99,Eng=95,Maths=75,Phy=60,Che=58)
findtotalmarks(300,"Balaji","B.Tech",OS=70,DBMS=60,NW=50,C=59)
findtotalmarks(400,"Rossum","Research")




#PureKeyWordVarLenArgsEx4.py
def findtotalmarks(ID,sname,cls,city="HYD",**submarks):
	print("-"*50)
	print("\tStudent Number:{}".format(ID))
	print("\tStudent Name:{}".format(sname))
	print("\tStudent Class:{}".format(cls))
	print("\tStudent Living City={}".format(city))
	print("-"*50)
	if(len(submarks)!=0):
		tot=0
		print("\tSubject Name\tMarks")
		print("-"*50)
		for subject,marks in submarks.items():
			print("\t{}\t\t{}".format(subject,marks))
			tot=tot+marks
		print("-"*50)
		print("\tTOTAL MARKS={}".format(tot))
		print("-"*50)
#Main Program
findtotalmarks(100,"Praveen","X",telugu=70,hindi=80,english=85,maths=90,science=89,social=80)
findtotalmarks(200,"Sandeep","XI",Sanskrit=99,Eng=95,Maths=75,Phy=60,Che=58)
findtotalmarks(300,"Balaji","B.Tech",OS=70,DBMS=60,NW=50,C=59)
findtotalmarks(cls="Research",sname="Rossum",city="NL",ID=400)
findtotalmarks(500,"Shankar","V",Tel=50,Eng=60,Maths=70,abacus=40,city="FINLAND")
findtotalmarks(600,"Athar","MCA","AP",AI=40,CG=60)



#PureKeyWordVarLenArgsEx5.py
def findtotalmarks(ID,sname,cls,*vals, city="HYD",**submarks):
	print("-"*50)
	print("\tStudent Number:{}".format(ID))
	print("\tStudent Name:{}".format(sname))
	print("\tStudent Class:{}".format(cls))
	print("\tStudent Living City={}".format(city))
	print("Variable Length args={} and Length={}".format(vals,len(vals)))
	print("-"*50)
	if(len(submarks)!=0):
		tot=0
		print("\tSubject Name\tMarks")
		print("-"*50)
		for subject,marks in submarks.items():
			print("\t{}\t\t{}".format(subject,marks))
			tot=tot+marks
		print("-"*50)
		print("\tTOTAL MARKS={}".format(tot))
		print("-"*50)
#Main Program
findtotalmarks(100,"Praveen","X",10,13,14,9,17,15,telugu=70,hindi=80,english=85,maths=90,science=89,social=80)
findtotalmarks(200,"Sandeep","XI",2.3,4.5,5.6,6.7,5,Sanskrit=99,Eng=95,Maths=75,Phy=60,Che=58)
findtotalmarks(300,"Balaji","B.Tech","A","B","C","D",OS=70,DBMS=60,NW=50,C=59)
findtotalmarks(400,"Rossum","Research",1,2,3,city="NL")
findtotalmarks(500,"Shankar","V",Tel=50,Eng=60,Maths=70,abacus=40,city="FINLAND")
findtotalmarks(600,"Athar","MCA",11,22,city="AP",AI=40,CG=60)


